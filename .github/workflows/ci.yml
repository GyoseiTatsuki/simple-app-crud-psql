name: Build and Deploy Docker

on:
  push:
    branches:
      - main  
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape pour récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Définition des variables selon l'environnement
      - name: Set environment variables
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=develop" >> $GITHUB_ENV
            echo "DATABASE_NAME=messages" >> $GITHUB_ENV
            echo "IMAGE_NAME=myappdev" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "DATABASE_NAME=postgres" >> $GITHUB_ENV
            echo "IMAGE_NAME=myappprod" >> $GITHUB_ENV
          else
            echo "Unsupported environment."
            exit 1
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      # Remplacement de la base de données dans le fichier de configuration
      - name: Replace database in config file
        run: sed -i "s/^database=.*$/database=${{ env.DATABASE_NAME }}/" ./project/db/resources/database.ini

      # Construction, tag et push de l'image Docker
      - name: Build, Tag, and Push Docker Image
        run: |
          echo "Building Docker image for ${{ env.ENVIRONMENT }}..."
          docker build -t ${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build  # Ce job dépend du succès du job 'build'
    runs-on: ubuntu-latest

    steps:
      # Étape pour récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Définition des variables pour l'environnement (prod ou dev)
      - name: Set environment variables
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=develop" >> $GITHUB_ENV
            echo "DATABASE_NAME=messages" >> $GITHUB_ENV
            echo "SERVER_IP=20.19.81.140" >> $GITHUB_ENV
            echo "IMAGE_NAME=myappdev" >> $GITHUB_ENV  # Nom de l'image pour le dev
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "DATABASE_NAME=postgres" >> $GITHUB_ENV
            echo "SERVER_IP=20.19.80.212" >> $GITHUB_ENV
            echo "IMAGE_NAME=myappprod" >> $GITHUB_ENV  # Nom de l'image pour la prod
          else
            echo "Unsupported environment."
            exit 1
          fi
        env:
          GITHUB_REF: ${{ github.ref }}

      # Configuration de la clé SSH pour la connexion au serveur
      - name: Set up SSH key for development
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        if: github.ref == 'refs/heads/main'

    # Configuration de la clé SSH pour la connexion au serveur (prod)
      - name: Set up SSH key for production
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        if: startsWith(github.ref, 'refs/tags/')

      # Créer et transférer le script de déploiement sur le serveur
      - name: Copy Deploy Script to Remote Server
        run: |
          echo '#!/bin/bash' > deploy.sh
          echo 'echo "Logging into Docker..."' >> deploy.sh
          echo 'echo "$LC_DOCKER_TOKEN" | docker login -u "$LC_DOCKER_USERNAME" --password-stdin' >> deploy.sh
          echo 'sudo docker pull $LC_DOCKER_USERNAME/${{ env.IMAGE_NAME }}:latest' >> deploy.sh  # Utilisation de IMAGE_NAME
          echo 'sudo docker stop ${{ env.IMAGE_NAME }} || true' >> deploy.sh
          echo 'sudo docker rm ${{ env.IMAGE_NAME }} || true' >> deploy.sh
          echo 'sudo docker run -d --name ${{ env.IMAGE_NAME }} -p 8088:8088 $LC_DOCKER_USERNAME/${{ env.IMAGE_NAME }}:latest' >> deploy.sh  # Utilisation de IMAGE_NAME
          chmod +x deploy.sh
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa deploy.sh azureuser@${{ env.SERVER_IP }}:/tmp/deploy.sh

      # Exécuter le script de déploiement sur le serveur
      - name: Run Deploy Script on Remote Server
        env:
          LC_DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          LC_DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: ssh -o StrictHostKeyChecking=no -o SendEnv=LC_DOCKER_USERNAME -o SendEnv=LC_DOCKER_TOKEN -i ~/.ssh/id_rsa azureuser@${{ env.SERVER_IP }} 'bash /tmp/deploy.sh'
